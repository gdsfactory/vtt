<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Layer Boolean</description>
 <version>0.9</version>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>VTT</group-name>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya

# Script for doing the Boolean operations used in VTT silicon photonics processes

delete_source = False  # Should the source layers be deleted
skip_waveguides = False  # should the WG_RIBS and WG_MOST be skipped to speed up the process


view = pya.Application.instance().main_window().current_view()
layout = view.active_cellview().layout()

add_dict = {}
sub_dict = {}
cpy_dict = {}

for i in range(layout.layers()):
  lr, dt = layout.get_info(i).layer, layout.get_info(i).datatype
  op = dt // 10
  tgt = dt % 10

#  if not (lr &gt;= 0 and lr &lt;= 10 and op &gt; 0 and op &lt; 4):
#    continue


  if layout.is_valid_layer(i):
    if op == 1:
      add_dict[(lr, tgt)] = i
    elif op == 2:
      sub_dict[(lr, tgt)] = i
    elif op == 3:
      cpy_dict[(lr, tgt)] = i

layers_to_iterate = list(add_dict.keys())
layers_to_iterate.extend(list(cpy_dict.keys()))

#for cell in layout.top_cells():
#  print(cell.name)

info_add = None
info_sub = None
info_cpy = None

for cell in layout.top_cells():
  for key in list(set(layers_to_iterate)):
    layout.clear_layer(layout.layer(*key))

    info_add = None
    info_sub = None
    info_cpy = None

    if key in add_dict.keys():
      res = pya.Region(cell.begin_shapes_rec(add_dict[key]))
      info_add = layout.get_info(add_dict[key])
    else:
      res = pya.Region()

    if key in sub_dict.keys():
      res = res - pya.Region(cell.begin_shapes_rec(sub_dict[key]))
      info_sub = layout.get_info(sub_dict[key])

    if key in cpy_dict.keys():
      res = res + pya.Region(cell.begin_shapes_rec(cpy_dict[key]))
      info_cpy = layout.get_info(cpy_dict[key])

    res.merge()

    cell.shapes(layout.layer(*key)).insert(res)

if delete_source:
  if info_add:
      lr = layout.layer(info_add.layer, info_add.datatype)
      layout.clear_layer(lr)
      layout.delete_layer(lr)
  if info_sub:
      lr = layout.layer(info_sub.layer, info_sub.datatype)
      layout.clear_layer(lr)
      layout.delete_layer(lr)
  if info_cpy:
      lr = layout.layer(info_cpy.layer, info_cpy.datatype)
      layout.clear_layer(lr)
      layout.delete_layer(lr)


# This iterates over the layer definitions
#lp = view.begin_layers()
#while not lp.at_end():
#  layer = lp.current()
#  print(layer.name, lp.current())
#  lp.next()
  </text>
</klayout-macro>
